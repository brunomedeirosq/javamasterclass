useful intelij shortcuts:
CTRL + ALT + L reformat code
CTRL+ W select several block of code
CTRL + K open git commit tab
ALT + 1 open and close project window

psvm create the public static void main method
sout create a system out println




jshell commands:
/list
/var

#wrapper classes for primitive data types with additional information like:
Integer.MIN_VALUE
Integer.MAX_VALUE

#to get width for different primitive data types that allow different whole number sizes:
Integer.SIZE
Short.SIZE
Long.SIZE

#important concept of overflow and underflow that the compiler will not evalute as error and will cause miss behavior caused from trying to store a size number in the wrong data type

#default data type for numbers in java is "int" even if we declare "long myNumber = 2147483648;", this will cause error since we need to put a sufix "L" to force java to deal with our number as long like this, "long myNumber = 2147483648L;"

jshell> Integer.MAX_VALUE
$17 ==> 2147483647

jshell> long myValue = 2147483647;
myValue ==> 2147483647

jshell> long myValue = 2147483648;
|  Error:
|  integer number too large
|  long myValue = 2147483648;
|

jshell> long myValue = 2147483648L;
myValue ==> 2147483648

double is the default data type for floating point numbers since it's more precise than float, it's larger and more precise than a float

bit is the smallest unit of data containing at most 2 logical states, normally 0 and 1

8 bits combine to make a single unit of addressable memory, called a “Byte”

however java byte with small "b" is a java primitive data type capable of storing 8 bits at a time

Byte.SIZE = 8 bits (in this case java Byte is a java wrapper class for primitive data type byte that have useful and additioal information such as max and min value, or size/width). Java Byte is a wrapper class used to store the primitive data type “byte” for easier access to built-in advanced functions.

https://codegym.cc/groups/posts/java-byte-keyword

double > 64 bits > 8 Bytes memory to store a number

float > 32 bits > 4 Bytes memory to store a number

1 Byte = 8 bits

Exame question:
To assign a double value (java default data type for floating numbers, decimal or real numbers) to a float variable we need to cast or use the sufix "F"/"f", since if we try to set a double (more precise data type) into a less precise data type like float the compiler will raise an error.

float myFloatNumber = 5.25; > ERROR
float myFloatNumber = 5.25F; > OK
float myFloatNumber = 5.25f; > OK
float myFloatNumber = (float) 5.25; > OK

char occupies 2 bytes of memory, or 16 bits, and thus has a witdh of 16 > the reason it's not just a single byte, is that a char is stored as a 2 byte number, similar to the short. This number gets mapped to a single character by Java.

unicode is an international encoding standard for use with different languages and scripts by which each letter, digit, or symbol is assigned a unique numeric value that applies across different platforms and programs.

Unicode examples:

U+0044
jshell> '\u0044'
$43 ==> 'D'

Dec 68
jshell> char test = 68;
test ==> 'D'

Important concept in JAVA: classes in Java are custom data types

String concatenation > A String + anything else, gives us a String as a result, concatenating anything after the String as text to the initial String.

String class is immutable!
StringBuilder classe is mutable!

Importante example when using "variable++;" or "variable+=1;" as example 

jshell> {
   ...>     int result = 10;
   ...>     result -= 5.5;
   ...>     System.out.print(result);
   ...> }
4

the above expression is equal to

jshell> result = (int) (10 - 5.5)
result ==> 4

jshell> 10 - 5.5
$68 ==> 4.5

since the result is int data type when using result -= 5.5; java is doing (int) (10 - 5.5), casting to int, so the result is only the whole number 4, the integer part and the decimal part is discarded.

Intellij Notes:

using "psvm" and "tab" intellij will add the main class method declaration automatically

"public" java keyword is called an "access modifier" for java classes and allows us to define which parts of our code, or even someone else's code, can access a particular element.
"public" access modifier means other code can access this class.

"method" in java is collection of statements, one or more, that perform an operation

method called "main" is a special java method that java will looks when running a program. it's the entry point for any java code.

"if-then-else statement" most basic control flow statements called conditional logic

= assign

== equal operator that will evaluate on true or false

always use code block, {}

ampersand operator && (AND operator, both conditions should evaluate true)

two pipes operator || operator (OR operator, it enough that one of the conditions evaluate true)

! exclamation mark or NOT operator is Logical Complement Operator, it can be used for boolean variables to test the opposite value

boolean isCar = false;

careful when using if (isCar = true) since this mistake will set isCar to true and execute the block of code under if condition. we must use == operator to compare and not = to assign

ternary operator is a conditional operator that has three operands. the ternary operator is a shortcut to assigning one of two values to a variable, depending on a given condition
it's like a shortcut of the if-then-else statement

operand1 ? operand2 : operand3

operand 1 must be a condition that evaluates into a boolean result or must be a boolean variable
operand 2 can be any data type and will be returned when operand 1 is true
operand 3 can be any data type and will be returned when operand 1 is false

boolean isDomestic = (makeOfCar == "Volkswagen") ? false : true;

its equivalent to

boolean isDomestic = (makeOfCar!="Volkswagen"); //this assignment to a boolean variable of the condition result is more easy to read than the ternary operator example

Java code units as important concepts:

expression - an expression computes to a single value (does not include ; or data type from variables definition)

eg: int highscore = 50;
the expression is only: "highscore = 50"

eg: double kilometers = (100 * 1.609344);
the expression is only: "kilometers = (100 * 1.609344)"
the expression is also: "(100 * 1.609344)"

statement - statements are stand alone units of work

eg: double kilometers = (100 * 1.609344);
the complete line above is a java statement, including data type double and semicolon ;

code of blocks - code block is a set of zero, one or more statements, usually grouped together in some way to achieve a single goal

java methods concept: A method declares executable code that can be invoked, passing a fixed number of values as arguments

technically, a parameter is the definition as shown in the method declaration, and the argument will be the value that's passed to the method when we call it

some programing languages make a difference between a method that return a value as a function, and a method that doesn't return a value, or void as procedure.

declaring the method:
declaring modifiers like public or static, there are others
declaring the return type:
void is java keyword meaning no data is returned from a method
alternatively, the return type can be any primitive data type or class
if a return type is defined, the code block must use at least one return statement, returning a value, of the declared type or comparable type

A method is uniquely defined in a class by it's name, and the number and type of parameters that are declared for it. This is called the method signature.

You can have multiple methods with the same method name, as long as the method signature (meaning the parameters declared) are different.

java doesn't support default values for parameters. In Java the number of arguments you pass, and their type,
must match the parameters in the method declaration exactly

The "main" method is a special method for Java and we can't define methods inside methods, they should be defined inside the class curly brackets,
however we can call methods inside other methods, in this case we can use main method to call our own methods.


method overloading - method overloading occurs when a class has multiple methods, with same name, but the methods are declared with different parameters.
So we can execute a method with one name, but call it with different arguments.

A method signature consists of the name of the method, and the uniqueness of the declaration of its parameters.
In other words, a signature is unique, not just by the method name, but in combination with the number of parameters, their types, and the order in which they are
declared.

NOTE: A method's return type is not part of the signature.
NOTE: A parameter name is also not part of the signature.

IMPORTANT: The type, order, and number of parameters, in conjunction with the name, make a method signature unique.
A unique method signature is the key for the java compiler, to determine if a method is overloaded correctly.
The name of the parameter is not part of the signature, and therefore it doesn't matter, from the java's point of view, what we call our parameters.

